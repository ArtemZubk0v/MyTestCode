using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using laba1;
namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        //сравнение чисел текущего(Cur) элемента кольца и другого элемента того же класса Element при равных значениях; 
        public void EaseEquals_With_Same_Number_Are_Numbers_Equal()
        {
            //Arrange
            double a = 1;
            double b = 1;
            Ring myring = new Ring();
            myring.Cur = new Ring.Element();
            Ring.Element second = new Ring.Element();
            bool expected = true;
            //Act
            myring.Cur.number = a;  
            second.number = b;
            bool actual = myring.EaseEquals(second);
            //Assert
            Assert.AreEqual(expected, actual,"Numbers are equal");
        }
       [TestMethod]
        //сравнение чисел текущего(Cur) элемента кольца и другого элемента того же класса Element при неравных значениях; 

        public void EaseEquals_With_Different_Number_Are_Not_Numbers_Equal()
        {
            //Arrange
            double a = 2;
            double b = 7;
            Ring myring = new Ring();
            myring.Cur = new Ring.Element();
            Ring.Element second = new Ring.Element();
            bool expected = false;
            //Act
            myring.Cur.number = a;
            second.number = b;
            bool actual = myring.EaseEquals(second);
            //Assert
            Assert.AreEqual(expected, actual, "Numbers are not equal");
        }
        [TestMethod]
        //проверка на правильность записи элемента в кольцо
        public void Add_To_Ring_Are_added()
        {
            //Arrange
            double a = 3;
            Ring myring = new Ring();
            //Act
            myring.Add(a);
            //Assert
            Assert.AreEqual(a, myring.Cur.number, "Adding works right");
        }
        [TestMethod]
        //проверка на правильность перемещения указателя по часовой стрелке
        public void Right_Current_becomes_next_Is_next()
        {
            //Arrange
            Ring.Element first = new Ring.Element();
            Ring.Element second = new Ring.Element();
            Ring.Element third = new Ring.Element();
            Ring myring = new Ring();
            myring.Cur = third;
            myring.Cur.next = first;
            first.next = second;
            second.next = myring.Cur;
            //Act
            myring.Right();
            //Assert
            Assert.AreEqual(first, myring.Cur, "Current pointer has moved to the right");
        }
        [TestMethod]
        //проверка на правильность перемещения указателя против часовой стрелки
        public void Left_Current_becomes_previous_Is_previous()
        {
            //Arrange
            Ring.Element first = new Ring.Element();
            Ring.Element second = new Ring.Element();
            Ring.Element third = new Ring.Element();
            Ring myring = new Ring();
            myring.Cur = third;
            myring.Cur.previous = second;
            second.previous = first;
            first.previous = third;
            //Act
            myring.Left();
            //Assert
            Assert.AreEqual(second, myring.Cur, "Current pointer has moved to the left");
        }

        [TestMethod]
        //сравнение чисел при том, что головка(Cur) указывает на один из элементов
        public void DiffEquals_Cur_points_to_elem_Not_equal()
        {
            //Arrange
            Ring.Element first = new Ring.Element();
            first.number = 1;
            Ring.Element second = new Ring.Element();
            second.number = 1;
            Ring myring = new Ring();
            myring.Cur = first;
            bool expected = false;
            //Act
            bool actual = myring.DiffEquals(first, second);
            //Assert
            Assert.AreEqual(expected, actual, "They are not equal");
        }
        [TestMethod]
        //сравнение одинаковых чисел при том, что головка(Cur) не указывает ни на один из элементов
        public void DiffEquals_Numbers_are_sameANDcur_does_not_point_to_elem_Numbers_are_Equal()
        {
            //Arrange
            Ring.Element first = new Ring.Element();
            Ring.Element second = new Ring.Element();
            double a = 1;
            double b = 1;
            Ring myring = new Ring();
            bool expected = true;
            //Act
            first.number = a;
            second.number = b;
            bool actual = myring.DiffEquals(first, second);
            //Assert
            Assert.AreEqual(expected, actual, "They are equal");
        }
        [TestMethod]
        //сравнение разных чисел при том, что головка(Cur) не указывает ни на один из элементов
        public void DiffEquals_Numbers_are_differentANDcur_does_not_point_to_elem_Numbers_are_Equal()
        {
            //Arrange
            Ring.Element first = new Ring.Element();
            Ring.Element second = new Ring.Element();
            double a = 1;
            double b = 2.2;
            Ring myring = new Ring();
            bool expected = false;
            //Act
            first.number = a;
            second.number = b;
            bool actual = myring.DiffEquals(first, second);
            //Assert
            Assert.AreEqual(expected, actual, "They are not equal");
        }
        [TestMethod]
        //проверка на правильность считывания элемента, без его извлечения
        public void Read_CurrElement_Is_got_right()
        {
            //Arrange
            Ring myring = new Ring();
            myring.Cur = new Ring.Element();
            //Act
            Ring.Element x = myring.Read();
            //Assert
            Assert.AreEqual(myring.Cur, x, "It is read right");
        }
        [TestMethod]
        //проверка на правильность считывания элемента, при том, что он извлекается
        public void ReadAndRetrive_retrived_currElement_Is_got_right()
        {
            //Arrange
            Ring myring = new Ring();
            Ring.Element myelem = new Ring.Element();
            //Act
            myring.Cur = myelem;
            Ring.Element x = myring.ReadAndRetrive();
            //Assert
            Assert.AreEqual(myelem, x, "It is read right");
        }
        [TestMethod]
        //проверка на то, что элемент извлекся
        public void ReadAndRetrive_retrived_currElement_Is_retrived()
        {
            //Arrange
            Ring myring = new Ring();
            Ring.Element myelem = new Ring.Element();
            //Act
            myring.Cur = myelem;
            Ring.Element x = myring.ReadAndRetrive();
            //Assert
            Assert.AreNotEqual(myring.Cur, myelem, "Current element is retrived");
        }

    }
}
